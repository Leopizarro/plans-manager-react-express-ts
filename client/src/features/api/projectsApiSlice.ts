// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"

interface Project {
  id: number
  projectTitle: string
  description: string
  completionRate: number
  createdAt: Date
  updatedAt: Date
  user: {
    id: number
    firstName: string
    lastName: string
  }
  projectCategories: {
    id: number
    code: string
    description: string
  }[]
  projectMilestones: {
    id: number
    title: string
    description: string
    createdAt: Date
    completedAt: Date | null
    observation: string
  }[]
}

interface ProjectsApiResponse {
  projects: Project[]
}

export const projectsApiSlice = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: "http://localhost:5000/projects"}),
  reducerPath: "projectsApi",
  // Used for caching and invalidation.
  tagTypes: ["Projects"],
  endpoints: build => ({
    getProjects: build.query<ProjectsApiResponse, void>({
      query: () => '/',
      providesTags: (result, error, arg) =>
        result
          ? [...result.projects.map(({ id }) => ({ type: 'Projects' as const, id })), 'Projects']
          : ['Projects'],
    }),
    deleteProject: build.mutation<any, number>({
      query: (id) => {
        return {
          url: `/delete/${id}`,
          method: "DELETE"
        }
      },
      invalidatesTags: (result, error, id) => [{ type: 'Projects', id }],
    }),
    getOneProject: build.query<any, number>({
      query: (id) => {
        return {
          url: `/${id}`,
          method: 'GET'
        }
      },
      providesTags: ['Projects']
    }),
    updateProject: build.mutation<{ok: boolean, message: string, projectUpdated: Project | undefined }, Partial<Project>>({
      query: (data) => {
        const {id, ...body} = data;
        return {
            url: `/update/${id}`,
            method: 'PATCH',
            body
        }
      },
      invalidatesTags: ['Projects'],
    }),
    createProject: build.mutation<{ok: boolean, message: string, projectCreated: Project | undefined }, Partial<Project>>({
      query: (body) => {
        return {
            url: `/create/`,
            method: 'POST',
            body
        }
      },
      invalidatesTags: ['Projects'],
    }),
  }),
})

// Hooks are auto-generated by RTK-Query
export const { useGetProjectsQuery, useDeleteProjectMutation, useGetOneProjectQuery, useUpdateProjectMutation, useCreateProjectMutation } = projectsApiSlice;